<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cqupt.dormitory.model.Building">
	<resultMap type="com.cqupt.dormitory.model.Building" id="buildingResult">
		<id property="id" column="building_id"/>
		<result property="buildingNum" column="building_num"/>
		<result property="sex" column="sex"/>
		<association property="area" column="area_id" resultMap="com.cqupt.dormitory.model.Area.areaResult"/>
	</resultMap>
	
	<select id="findAllBuilding" resultMap="buildingResult">
		SELECT * FROM `building` 
	</select>

	<!-- 这里写 * 是为了方便 -->
	<select id="find_building_by_areaname" parameterType="string" resultType="com.cqupt.dormitory.model.Building"> 
		SELECT building.`building_id` as id,building.`building_num` as buildingNum FROM building LEFT JOIN AREA ON(area.`area_id`=building.`area_id`) WHERE area.`area_name`=#{areaName}
	</select>
	
	<select id="find_building_by_sex" parameterType="string" resultMap="buildingResult">
		SELECT building.`area_id`,building.`building_id`,building.`building_num`,building.`sex`,area.`area_id`,area.`area_name` FROM building LEFT JOIN AREA ON(area.`area_id` = building.`area_id`) WHERE building.`sex`=#{sex}
		ORDER BY area.`area_id`
	</select>
	
	<select id="find_building_emptybed" parameterType="int" resultType="int">
		SELECT COUNT(student.`stu_id`) FROM student RIGHT JOIN
		(SELECT room_id,room.`total_bed` FROM room LEFT JOIN FLOOR ON(room.`floor_id`=floor.`floor_id` )WHERE floor.`building_id`=#{buildingId}) u
		ON(u.room_id  = student.`room_id`)
	</select>
	
	<select id="find_all_building_totalbed" parameterType="int" resultType="int" >
		SELECT SUM(room.`total_bed`) FROM room LEFT JOIN FLOOR ON(room.`floor_id`=floor.`floor_id` )WHERE floor.`building_id`=#{buildingId}
	</select>
	
	<update id="update" parameterType="com.cqupt.dormitory.model.Building">
		UPDATE  `building` SET `area_id` = #{area.id} 
			<if test="sex!=null">
			,`sex` = #{sex}
			</if>
		 where building_num=#{buildingNum}
	</update>
	
	<select id="find_building_person" parameterType="string" resultType="int">
		SELECT COUNT(student.`stu_id`) FROM student RIGHT JOIN room ON(room.`room_id` = student.`room_id`) WHERE room.`room_num` LIKE #{buildingNum}
	</select>
	
	<select id="is_change_sex" parameterType="map" resultType="int">
		SELECT COUNT(*) FROM building WHERE building.`building_num` LIKE #{buildingNum} AND building.`sex`=#{sex}
	</select>
	
	
	<select id="find_building_by_sex_area" parameterType="map" resultMap="buildingResult">
		SELECT * FROM building LEFT JOIN AREA ON(building.`area_id`=area.`area_id`) WHERE area.`area_name` LIKE #{area} AND sex LIKE #{sex}
	</select>
	
	<select id="find_building_student_numbers"  parameterType="map" resultType="string">
		SELECT DISTINCT(building_num) FROM student LEFT JOIN 
		(
		SELECT room.`room_id`,building_num FROM room LEFT JOIN 
		(SELECT floor.`floor_id`,building.`building_num` FROM building LEFT JOIN FLOOR ON(building.`building_id` = floor.`building_id`) )b 
		ON (room.`floor_id` = b.floor_id)
		) r
		ON(student.`room_id` = r.room_id)
		WHERE student.`stu_num` IN
		<foreach item="item" index="index" collection="studentNums"  open="(" separator="," close=")">
			#{item}
		</foreach>
		AND student.`room_id` IS NOT NULL 
		GROUP BY student.`room_id`
	</select>
	
	
	<select id="find_building_by_building_name" parameterType="string" resultMap="buildingResult">
		SELECT * FROM building WHERE building.`building_num` = #{buildingNum}
	</select>
	
	<insert id="add" parameterType="com.cqupt.dormitory.model.Building">
		INSERT INTO `building` (`building_num`, `area_id`, `sex`) VALUES (#{buildingNum}, #{area.id}, #{sex})
	</insert>
	
	<delete id="delete_building_by_buildingnum" parameterType="string">
		DELETE FROM `building` WHERE building.`building_num` = #{building}
	</delete>
	
	<select id="find_max_buildingnum" resultType="int">
		SELECT MAX(CONVERT(building_num,SIGNED)) FROM building 
	</select>
	
</mapper>